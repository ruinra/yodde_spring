<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="www.yodde.co.kr/store">
	<insert id="memberJoin" parameterType="com.yodde.memberModel.MemberDto">
		insert into member(email,
		password, zipcode, nickname, profilePic, memberLv, verificationCode)
		values(
		#{email},
		#{password},
		#{zipcode},
		#{nickName},
		#{profilePic, jdbcType=VARCHAR},
		#{memberLv},
		#{verificationCode}
		)
	</insert>

	<insert id="memberJoinAuth" parameterType="java.util.HashMap">
		insert into auth
		values(
		#{email},
		#{authority}
		)
	</insert>

	<select id="isExistMember" parameterType="String" resultType="String">
		select email from member where email = #{id}
	</select>

	<select id="selectMember" parameterType="String"
		resultType="com.yodde.memberModel.MemberDto">
		select * from member where email = #{id}
	</select>

	<select id="selectMembersByNick" parameterType="String"
		resultType="com.yodde.memberModel.MemberDto">
		select * from member where nickname like #{query}
	</select>

	<update id="updateMemberFile" parameterType="com.yodde.memberModel.MemberDto">
		update member set
		nickname = #{nickName},
		profilepic = #{profilePic},
		zipcode = #{zipcode},
		password= #{password}
		where email = #{email}
	</update>

	<update id="updateMember" parameterType="com.yodde.memberModel.MemberDto">
		update member set
		nickname = #{nickName},
		zipcode = #{zipcode},
		password= #{password}
		where email = #{email}
	</update>

	<select id="memberIdCheck" parameterType="String" resultType="String">
		select email from auth where email=#{email}
	</select>

	<select id="memberNickNameCheck" parameterType="String"
		resultType="String">
		select nickname from member where nickname=#{nickname}
	</select>

	<delete id="deleteMember" parameterType="com.yodde.memberModel.MemberDto">
		DELETE FROM MEMBER WHERE email=#{email} and password=#{password}
	</delete>
	<delete id="deleteAuthByMemberDelete" parameterType="String">
		DELETE FROM AUTH WHERE email=#{email}
	</delete>

	<delete id="deleteReviewByMemberDelete" parameterType="String">
		DELETE FROM REVIEW WHERE writer=#{email}
	</delete>
	
</mapper>